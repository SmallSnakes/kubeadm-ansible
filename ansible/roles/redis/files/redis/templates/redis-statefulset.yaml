{{- if not .Values.sentinel.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  replicas: 1
  serviceName: {{ template "redis-ha.fullname" . }}
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: IfNotPresent
        command:
          - redis-server
        args:
          - /etc/redis/redis.conf
        ports:
        - name: redis
          containerPort: {{ .Values.redis.port }}
          protocol: TCP
{{- if .Values.auth }}
        env:
        - name: AUTH
          valueFrom:
            secretKeyRef:
            {{- if .Values.existingSecret }}
              name: {{ .Values.existingSecret }}
            {{- else }}
              name: {{ template "redis-ha.fullname" . }}
            {{- end }}
              key: {{ .Values.authKey }}
{{- end }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.redis.port }}
          initialDelaySeconds: 15
        startupProbe:
          failureThreshold: 22
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: {{ .Values.redis.port }}
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.redis.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/redis/redis.conf
          subPath: redis-master.conf
        - name: data
          mountPath: /data
        - name: log
          mountPath: /var/log/redis
      volumes:
      - name: config
        configMap:
          name: {{ template "redis-ha.fullname" . }}-configmap
      - name: log
        emptyDir: {}
      hostNetwork: {{ .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      {{- range .Values.persistentVolume.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolume.size | quote }}
    {{- if .Values.persistentVolume.storageClass }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- if .Values.persistentVolume.selector }}
      selector:
{{ toYaml .Values.persistentVolume.selector | indent 8 }}
    {{- end }}
{{- else if .Values.hostPath.path }}
      - name: data
        hostPath:
          path: {{ tpl .Values.hostPath.path .}}
{{- else }}
      - name: data
        emptyDir: {}
{{- end }}
{{- end }}