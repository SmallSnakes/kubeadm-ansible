apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-query
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replica }}
  strategy:
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: thanos-query
      thanos: query
  template:
    metadata:
      labels:
        app.kubernetes.io/name: thanos-query
        thanos: query
    spec:
      containers:
      - name: thanos-qurey
        args:
        - query
        - --query.replica-label=monitor
        - --query.auto-downsampling
        - --http-address=0.0.0.0:{{ .Values.service.query.port }}
        {{- range $key, $value := .Values.prometheusServerIP }}
        - --store={{ $value }}:{{ $.Values.service.sidecar.grpc_port }}
        {{- end }}
        image: {{ .Values.image.thanos }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: {{ .Values.service.query.port }}
          name: http
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: thanos
                    operator: In
                    values:
                    - query
              topologyKey: 'kubernetes.io/hostname'
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: {{ .Values.affinity.key }}
                operator: In
                values:
                - {{ .Values.affinity.value }}
            weight: 100
      restartPolicy: Always
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecrets }}
      {{- end }}
      priorityClassName: {{ .Values.priorityClassName }}
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: {{ .Values.hostNetwork }}
      serviceAccount: {{ .Values.serviceAccountName}}
      serviceAccountName: {{ .Values.serviceAccountName}}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
